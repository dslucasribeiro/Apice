'use client';

import { useEffect, useState } from 'react';
import { createSupabaseClient } from '@/lib/supabase';
import type { User } from '@/types/user';
import Navigation from '@/components/Navigation';
import { useRouter } from 'next/navigation';
import InputMask, { Props as InputMaskProps } from 'react-input-mask';
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import "./datepicker.css";
import { ptBR } from 'date-fns/locale';

export default function Home() {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingUser, setEditingUser] = useState<number | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [newUser, setNewUser] = useState({
    nome: '',
    cpf: '',
    rg: '',
    data_nasc: '',
    celular: '',
    email: '',
    ano_conclusao_ensino_medio: new Date().getFullYear().toString(),
    responsavel_financeiro: 'Eu mesmo',
    tipo: 'Aluno',
    status: 'ativo'
  });

  const router = useRouter();
  const supabase = createSupabaseClient();

  useEffect(() => {
    checkUser();
    fetchUsers();
  }, []);

  const checkUser = async () => {
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) {
      router.push('/login');
    }
  };

  const fetchUsers = async () => {
    try {
      const { data, error } = await supabase
        .from('usuarios')
        .select('*');

      if (error) throw error;
      
      setUsers(data || []);
    } catch (error) {
      console.error('Error fetching users:', error);
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setNewUser({
      nome: '',
      cpf: '',
      rg: '',
      data_nasc: '',
      celular: '',
      email: '',
      ano_conclusao_ensino_medio: new Date().getFullYear().toString(),
      responsavel_financeiro: 'Eu mesmo',
      tipo: 'Aluno',
      status: 'ativo'
    });
    setEditingUser(null);
  };

  const handleEdit = (user: User) => {
    setNewUser({
      nome: user.nome,
      cpf: user.cpf,
      rg: user.rg,
      data_nasc: user.data_nasc,
      celular: user.celular,
      email: user.email,
      ano_conclusao_ensino_medio: user.ano_conclusao_ensino_medio.toString(),
      responsavel_financeiro: user.responsavel_financeiro,
      tipo: user.tipo,
      status: user.status
    });
    setEditingUser(user.id);
    setIsModalOpen(true);
  };

  const handleDelete = async (id: number) => {
    if (window.confirm('Tem certeza que deseja excluir este aluno?')) {
      try {
        const { error } = await supabase
          .from('usuarios')
          .delete()
          .eq('id', id);

        if (error) throw error;

        setUsers(users.filter(user => user.id !== id));
      } catch (error) {
        console.error('Error deleting user:', error);
        alert('Erro ao excluir aluno. Por favor, tente novamente.');
      }
    }
  };

  const handleSubmit = async () => {
    try {
      const userToSave = {
        ...newUser,
        cpf: newUser.cpf.replace(/\D/g, ''),
        celular: newUser.celular.replace(/\D/g, ''),
      };

      let error;
      let data;

      if (editingUser) {
        // Atualizar usuário existente
        const response = await supabase
          .from('usuarios')
          .update(userToSave)
          .eq('id', editingUser)
          .select();
        
        error = response.error;
        data = response.data;
      } else {
        // Inserir novo usuário
        const response = await supabase
          .from('usuarios')
          .insert([userToSave])
          .select();
        
        error = response.error;
        data = response.data;
      }

      if (error) {
        console.error('Error details:', error);
        throw error;
      }

      if (data) {
        if (editingUser) {
          setUsers(users.map(user => user.id === editingUser ? data[0] : user));
        } else {
          setUsers([...users, data[0]]);
        }
        setIsModalOpen(false);
        resetForm();
      }
    } catch (error) {
      console.error('Error saving user:', error);
      alert('Erro ao salvar aluno. Por favor, tente novamente.');
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const target = e.target as HTMLInputElement | HTMLSelectElement;
    const { name, value } = target;
    setNewUser(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleDateChange = (date: Date | null) => {
    if (date) {
      setNewUser(prev => ({
        ...prev,
        data_nasc: date.toISOString().split('T')[0]
      }));
    }
  };

  // Gera array de anos para seleção (últimos 50 anos)
  const years = Array.from({ length: 50 }, (_, i) => new Date().getFullYear() - i);

  if (loading) {
    return (
      <>
        <Navigation />
        <div className="flex justify-center items-center min-h-screen bg-gray-900">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </>
    );
  }

  return (
    <div className="min-h-screen bg-gray-900">
      <Navigation />
      <main className="container mx-auto px-4 py-8">
        <div className="flex items-center justify-between mb-6 space-x-4">
          <h1 className="text-2xl font-bold text-blue-500">Alunos</h1>
          
          <div className="flex items-center space-x-4 flex-1 max-w-2xl justify-end">
            {/* Contador de Alunos */}
            <div className="flex items-center bg-gray-800 px-4 py-2 rounded-lg">
              <span className="text-xl font-bold text-blue-500">{users.length}</span>
              <span className="ml-2 text-gray-400">Alunos</span>
            </div>

            {/* Campo de Pesquisa */}
            <div className="relative flex-1 max-w-md">
              <input
                type="text"
                placeholder="Pesquisar"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-blue-500 pl-10"
              />
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg className="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clipRule="evenodd" />
                </svg>
              </div>
            </div>

            {/* Botão Adicionar */}
            <button
              className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition duration-150 ease-in-out transform hover:scale-105"
              onClick={() => setIsModalOpen(true)}
            >
              Adicionar Aluno
            </button>
          </div>
        </div>

        {isModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-gray-800 rounded-lg p-6 w-full max-w-md">
              <h2 className="text-xl font-bold text-blue-500 mb-4">
                {editingUser ? 'Editar Aluno' : 'Adicionar Aluno'}
              </h2>
              <div className="space-y-4">
                <div>
                  <label className="block text-gray-300 mb-1">Nome</label>
                  <input
                    type="text"
                    name="nome"
                    value={newUser.nome}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-gray-300 mb-1">CPF</label>
                  <InputMask
                    mask="999.999.999-99"
                    name="cpf"
                    value={newUser.cpf}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-gray-300 mb-1">RG</label>
                  <input
                    type="text"
                    name="rg"
                    value={newUser.rg}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-gray-300 mb-1">Data de Nascimento</label>
                  <DatePicker
                    selected={newUser.data_nasc ? new Date(newUser.data_nasc) : null}
                    onChange={handleDateChange}
                    dateFormat="dd/MM/yyyy"
                    showYearDropdown
                    scrollableYearDropdown
                    yearDropdownItemNumber={100}
                    locale={ptBR}
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
                    wrapperClassName="w-full"
                    placeholderText="Selecione a data"
                  />
                </div>
                <div>
                  <label className="block text-gray-300 mb-1">Celular</label>
                  <InputMask
                    mask="(99) 999999999"
                    name="celular"
                    value={newUser.celular}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-gray-300 mb-1">Email</label>
                  <input
                    type="email"
                    name="email"
                    value={newUser.email}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-gray-300 mb-1">Ano de Conclusão do Ensino Médio</label>
                  <select
                    name="ano_conclusao_ensino_medio"
                    value={newUser.ano_conclusao_ensino_medio}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
                  >
                    {years.map(year => (
                      <option key={year} value={year}>
                        {year}
                      </option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-gray-300 mb-1">Responsável Financeiro</label>
                  <select
                    name="responsavel_financeiro"
                    value={newUser.responsavel_financeiro}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
                  >
                    <option value="Eu mesmo">Eu mesmo</option>
                    <option value="Outro">Outro</option>
                  </select>
                </div>
                <input type="hidden" name="tipo" value="Aluno" />
                <input type="hidden" name="status" value="ativo" />
                <div className="flex justify-end space-x-3 mt-6">
                  <button
                    onClick={() => {
                      setIsModalOpen(false);
                      resetForm();
                    }}
                    className="px-4 py-2 text-gray-300 hover:text-white transition-colors"
                  >
                    Cancelar
                  </button>
                  <button
                    onClick={handleSubmit}
                    className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
                  >
                    {editingUser ? 'Atualizar' : 'Salvar'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        <div className="overflow-x-auto rounded-lg border border-gray-800">
          <table className="min-w-full divide-y divide-gray-800">
            <thead className="bg-gray-800">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Nome</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Email</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">CPF</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">RG</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Data Nasc.</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Celular</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Ano Conclusão</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Ações</th>
              </tr>
            </thead>
            <tbody className="bg-gray-900 divide-y divide-gray-800">
              {users.filter(user => 
                user.nome.toLowerCase().includes(searchTerm.toLowerCase())
              ).map((user) => (
                <tr key={user.id}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{user.nome}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{user.email}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{user.cpf}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{user.rg}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{user.data_nasc}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{user.celular}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{user.ano_conclusao_ensino_medio}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                    <div className="flex space-x-4">
                      <button
                        className="text-blue-500 hover:text-blue-400 transition-colors duration-200"
                        onClick={() => handleEdit(user)}
                      >
                        Editar
                      </button>
                      <button
                        className="text-red-500 hover:text-red-400 transition-colors duration-200"
                        onClick={() => handleDelete(user.id)}
                      >
                        Excluir
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </main>
    </div>
  );
}
